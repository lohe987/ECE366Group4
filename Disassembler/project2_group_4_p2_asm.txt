Disassembling Machine Code from Program 2...
 
Init R2, 1         // R2 = 1
ShiftL               // R2 << 
ShiftL               // R2 << 
ShiftL               // R2 << 
ShiftL               // R2 << 
Add R3, R2         // R3 = R3 + R2
Init R2, 1         // R2 = 1
Store R3, (R2)         // M[R2] <- R3
Init R2, 1         // R2 = 1
Add R2, R2         // R2 = R2 + R2
Init R1, 0         // R1 = 0
Store R1, (R2)         // M[R2] <- R1
Init R1, 1         // R1 = 1
Init R2, 1         // R2 = 1
Add R1, R1         // R1 = R1 + R1
Add R1, R2         // R1 = R1 + R2
Load R0, (R1)         // R0 <- M[R1] 
Add R1, R2         // R1 = R1 + R2
Load R1, (R1)         // R1 <- M[R1] 
Init R2, 1         // R2 = 1
Add R3, R2         // R3 = R3 + R2
Init R2, 0         // R2 = 0
Store R2, (R3)         // M[R3] <- R2
Load R2, (R0)         // R2 <- M[R0] 
XorR2R1              // R2 = R2 XOR R1 
Init R1, 0         // R1 = 0
XorR2R1              // R2 = R2 XOR R1 
Init R3, 0         // R3 = 0
SltR1 R3, R2         // if R3 < R2, R1 = 1 
bezR1 R0         // if R1 == 0: PC = PC + R0 | else: PC++ 
Add R3, R2         // R3 = R3 + R2
Init R2, 1         // R2 = 1
ShiftL               // R2 << 
Add R2, R1         // R2 = R2 + R1
Store R3, (R2)         // M[R2] <- R3
AndR3                // R3 AND 1 
Init R2, 1         // R2 = 1
ShiftL               // R2 << 
Add R2, R1         // R2 = R2 + R1
Load R2, (R2)         // R2 <- M[R2] 
ShiftR               // R2 >> 
Init R1, 1         // R1 = 1
SltR1 R3, R1         // if R3 < R1, R1 = 1 
Init R2, 1         // R2 = 1
ShiftL               // R2 << 
ShiftL               // R2 << 
Add R2, R1         // R2 = R2 + R1
Load R0, (R2)         // R0 <- M[R2] 
bezR1 R0         // if R1 == 0: PC = PC + R0 | else: PC++ 
Init R2, 1         // R2 = 1
Add R2, R1         // R2 = R2 + R1
Load R0, (R2)         // R0 <- M[R2] 
ShiftR               // R2 >> 
Load R2, (R2)         // R2 <- M[R2] 
Jump R0         // PC = PC - R0
Init R1, 1         // R1 = 1
Sub R2, R1         // R2 = R2 - R1
ShiftR               // R2 >> 
Load R1, (R2)         // R1 <- M[R2] 
Init R3, 1         // R3 = 1
Add R1, R3         // R1 = R1 + R3
Store R1, (R2)         // M[R2] <- R1
Add R2, R3         // R2 = R2 + R3
Init R0, 1         // R0 = 1
Add R0, R2         // R0 = R0 + R2
Load R2, (R2)         // R2 <- M[R2] 
Init R3, 1         // R3 = 1
Add R0, R3         // R0 = R0 + R3
Add R0, R3         // R0 = R0 + R3
Load R1, (R3)         // R1 <- M[R3] 
Add R0, R1         // R0 = R0 + R1
Init R0, 1         // R0 = 1
Load R3, (R0)         // R3 <- M[R0] 
Init R2, 1         // R2 = 1
ShiftL               // R2 << 
Load R0, (R2)         // R0 <- M[R2] 
Sub R3, R0         // R3 = R3 - R0
Init R2, 0         // R2 = 0
Load R1, (R2)         // R1 <- M[R2] 
Sub R1, R3         // R1 = R1 - R3
Init R0, 1         // R0 = 1
Init R2, 1         // R2 = 1
ShiftR               // R2 >> 
ShiftR               // R2 >> 
Add R2, R0         // R2 = R2 + R0
Add R2, R0         // R2 = R2 + R0
Add R2, R0         // R2 = R2 + R0
Load R0, (R2)         // R0 <- M[R2] 
bezR1 R0         // if R1 == 0: PC = PC + R0 | else: PC++ 
Init R0, 1         // R0 = 1
Add R0, R2         // R0 = R0 + R2
Init R2, 0         // R2 = 0
Load R2, (R2)         // R2 <- M[R2] 
SltR1 R3, R2         // if R3 < R2, R1 = 1 
Load R2, (R0)         // R2 <- M[R0] 
Init R2, 1         // R2 = 1
Add R0, R2         // R0 = R0 + R2
Load R0, (R0)         // R0 <- M[R0] 
Jump R0         // PC = PC - R0
Init R0, 0         // R0 = 0
Store R3, (R0)         // M[R0] <- R3
Init R0, 1         // R0 = 1
Add R0, R0         // R0 = R0 + R0
Init R1, 0         // R1 = 0
Store R1, (R0)         // M[R0] <- R1
Init R0, 1         // R0 = 1
Add R0, R0         // R0 = R0 + R0
Load R0, (R0)         // R0 <- M[R0] 
Init R1, 1         // R1 = 1
Add R0, R1         // R0 = R0 + R1
Init R2, 1         // R2 = 1
ShiftL               // R2 << 
Init R0, 1         // R0 = 1
Add R0, R2         // R0 = R0 + R2
Load R2, (R0)         // R2 <- M[R0] 
ShiftL               // R2 << 
ShiftL               // R2 << 
ShiftL               // R2 << 
ShiftL               // R2 << 
ShiftL               // R2 << 
Store R2, (R0)         // M[R0] <- R2
Init R2, 1         // R2 = 1
Sub R0, R2         // R0 = R0 - R2
Sub R0, R2         // R0 = R0 - R2
Sub R0, R2         // R0 = R0 - R2
Sub R0, R2         // R0 = R0 - R2
Sub R0, R2         // R0 = R0 - R2
Load R1, (R0)         // R1 <- M[R0] 
Add R1, R2         // R1 = R1 + R2
Sub R0, R2         // R0 = R0 - R2
Init R2, 0         // R2 = 0
Add R0, R2         // R0 = R0 + R2
ShiftL               // R2 << 
Init R0, 1         // R0 = 1
Add R2, R0         // R2 = R2 + R0
Add R2, R0         // R2 = R2 + R0
Add R2, R0         // R2 = R2 + R0
Add R2, R0         // R2 = R2 + R0
Add R2, R0         // R2 = R2 + R0
ShiftL               // R2 << 
ShiftL               // R2 << 
SltR1 R1, R2         // if R1 < R2, R1 = 1 
Init R0, 1         // R0 = 1
Init R2, 1         // R2 = 1
Add R2, R0         // R2 = R2 + R0
Add R2, R0         // R2 = R2 + R0
Add R2, R2         // R2 = R2 + R2
ShiftL               // R2 << 
Sub R2, R0         // R2 = R2 - R0
Sub R2, R0         // R2 = R2 - R0
Load R0, (R2)         // R0 <- M[R2] 
Init R0, 1         // R0 = 1
Sub R2, R0         // R2 = R2 - R0
Sub R2, R0         // R2 = R2 - R0
Sub R2, R0         // R2 = R2 - R0
Sub R2, R0         // R2 = R2 - R0
Load R0, (R2)         // R0 <- M[R2] 
Jump R0         // PC = PC - R0
Init R0, 1         // R0 = 1
Add R0, R0         // R0 = R0 + R0
Load R0, (R0)         // R0 <- M[R0] 
